// !TIC-TAC-TOE
// –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É —Ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω—É–ª–∏–∫–∏.
// 1) –í—ñ–¥–º–∞–ª—é–π —Ä–æ–∑–º—ñ—Ç–∫—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑ –∫–ª–∞—Å–æ–º "content", –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–∞—Å—Ç–æ—Å—É–π –∫–ª–∞—Å "item"
// 2) –†–µ–∞–ª—ñ–∑—É–π –¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ö–æ–¥—É.
// 3) –°–∫—Ä—ñ–ø—Ç –º–∞—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è –≥—Ä–∏ —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º (—Ö / –æ).
// 4) –î–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ö–æ–¥—ñ–≤ –Ω–∞—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ (—Ö/–æ) –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∫–æ–∂–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –º—ñ—Å—Ç–∏–ª–∞ –¥–∞—Ç–∞ –∞—Ç—Ä–∏–±—É—Ç id.
// 5) –°—Ç–≤–æ—Ä–∏ —Å–∫—Ä—ñ–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–≥—Ä–∞—à–Ω–æ—ó –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó, —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –≤–∏–≥—Ä–∞—à–Ω–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–∞—Å–∏–≤–∏ "combinations".
// 6) –î–ª—è –≤–∏–≤–æ–¥—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–π –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É basicLightbox.
// 7) –ü—ñ—Å–ª—è –≤–∏–∑–Ω—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—ñ–¥–≥–æ—Ç—É–π —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä–∏.

const combinations = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [1, 4, 7],
  [2, 5, 8],
  [1, 5, 9],
  [3, 5, 7],
  [3, 6, 9],
];

const contentContainer = document.querySelector('.content');
let element = '';
let player = 'X';
let playerX = [];
let playerO = [];
let instance;

contentContainer.addEventListener('click', onClick);

function createMarkup() {
  for (let i = 1; i <= 9; i += 1) {
    element += `<div class="item" data-id=${i}></div>`;
  }
  contentContainer.insertAdjacentHTML('beforeend', element);
}
createMarkup();

function onClick(event) {
  if (!event.target.classList.contains('item') || event.target.textContent) {
    return;
  }
  event.target.textContent = player;

  resultCheck();

  player === 'X' ? (player = 'O') : (player = 'X');
}

function resultCheck() {
  let gameWinner = false;
  if (player === 'X') {
    playerX.push(Number(event.target.dataset.id));
    gameWinner = playerX.length >= 3 && winningCombinationSelect(playerX);
  } else {
    playerO.push(Number(event.target.dataset.id));
    gameWinner = playerO.length >= 3 && winningCombinationSelect(playerO);
  }

  if (gameWinner) {
    instance = basicLightbox.create(
      `<p class="gamewinner-text">Winner<br><span class="accent">Player ${player}</span></p>`,
      {
        onShow: instance => {
          window.addEventListener('keydown', onEscPress);
        },
        onClose: instance => {
          window.removeEventListener('keydown', onEscPress);
          resetGame();
        },
      }
    );
    instance.show();
  }
  // draw
  if (playerX.length + playerO.length === 9 && !gameWinner) {
    instance = basicLightbox.create(
      `<p class="draw-text">DRAW<br><span class="accent">LOOSERS</span><br>üòÇ</p>`,
      {
        onShow: instance => {
          window.addEventListener('keydown', onEscPress);
        },
        onClose: instance => {
          window.removeEventListener('keydown', onEscPress);
          resetGame();
        },
      }
    );
    instance.show();
  }
}

function winningCombinationSelect(arr) {
  return combinations.some(element => element.every(id => arr.includes(id)));
}

function onEscPress(event) {
  if (event.code === 'Escape') {
    console.log(event);
    instance.close();
  }
}

function resetGame() {
  const cellEl = document.querySelectorAll('div.item');
  cellEl.forEach(element => (element.textContent = ''));
  playerX = [];
  playerO = [];
  player = 'X';
}
